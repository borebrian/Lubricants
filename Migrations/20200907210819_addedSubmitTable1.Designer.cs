// <auto-generated />
using System;
using Fuela.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lubricants.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20200907210819_addedSubmitTable1")]
    partial class addedSubmitTable1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lubricants.Models.Add_item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDT")
                        .HasColumnType("int");

                    b.Property<string>("Item_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<float>("Item_price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IDT");

                    b.ToTable("Add_item");
                });

            modelBuilder.Entity("Lubricants.Models.Item_category", b =>
                {
                    b.Property<int>("IDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Add_itemid")
                        .HasColumnType("int");

                    b.Property<string>("Category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Item_categoryIDT")
                        .HasColumnType("int");

                    b.HasKey("IDT");

                    b.HasIndex("Add_itemid");

                    b.HasIndex("Item_categoryIDT");

                    b.ToTable("Items_category");
                });

            modelBuilder.Entity("Lubricants.Models.Tezt", b =>
                {
                    b.Property<int>("IDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("IDT");

                    b.ToTable("Tezt");
                });

            modelBuilder.Entity("Lubricants.Models.Add_item", b =>
                {
                    b.HasOne("Lubricants.Models.Item_category", "category")
                        .WithMany()
                        .HasForeignKey("IDT");
                });

            modelBuilder.Entity("Lubricants.Models.Item_category", b =>
                {
                    b.HasOne("Lubricants.Models.Add_item", null)
                        .WithMany("item_Categories")
                        .HasForeignKey("Add_itemid");

                    b.HasOne("Lubricants.Models.Item_category", null)
                        .WithMany("item_Categories")
                        .HasForeignKey("Item_categoryIDT");
                });
#pragma warning restore 612, 618
        }
    }
}
